#include <stdio.h>
#include <dshow.h>

// 파일명을 저장 할 변수
char g_fileName[256];

// 경로 및 파일명을 저장 할 변수
char g_pathFileName[512];

/**
*	미디어 파일을 파일 탐색기를 통해 선택(파일의 경로 및 파일명을 가져옴)하는 메소드
*
*	@return
*/
BOOL GetMediaFileName(void) {
	// 오픈 파일 네임 객체
	OPENFILENAME ofn;

	// 오픈 파일 네임 객체 설정
	ofn.lStructSize = sizeof(OPENFILENAME);
	ofn.hwndOwner = NULL;
	ofn.hInstance = NULL;
	ofn.lpstrFilter = NULL;
	ofn.lpstrCustomFilter = NULL;
	ofn.nMaxCustFilter = NULL;
	ofn.nFilterIndex = 0;
	ofn.lpstrFile = (char*)calloc(1, 512);
	ofn.nMaxFile = 512;
	ofn.lpstrFileTitle = (char*)calloc(1, 512);
	ofn.nMaxFileTitle = 255;
	ofn.lpstrInitialDir = NULL;
	ofn.lpstrTitle = "Select file to render...";
	ofn.Flags = OFN_FILEMUSTEXIST | OFN_HIDEREADONLY | OFN_PATHMUSTEXIST | OFN_NOCHANGEDIR;
	ofn.nFileOffset = 0;
	ofn.nFileExtension = 0;
	ofn.lpstrDefExt = NULL;
	ofn.lCustData = NULL;

	// 파일을 열 수 없는 경우
	if (!GetOpenFileName(&ofn)) {
		// 문자열들 메모리 해제
		free(ofn.lpstrFile);
		free(ofn.lpstrFileTitle);

		return false;
	}

	// 파일을 가져 온 경우 
	else {
		// 오픈 파일 네임 객체에서 경로 및 파일명을 복사
		strcpy(g_pathFileName, ofn.lpstrFile);

		// 오픈 파일 네임 객체에서 파일명을 복사
		strcpy(g_fileName, ofn.lpstrFileTitle);

		// 문자열들 메모리 해제
		free(ofn.lpstrFile);
		free(ofn.lpstrFileTitle);
	}

	return true;
}

/**
*	필터 그래프 매니져를 이용하여 스트림을 파일로 저장하는 메소드
*
*	@param pGraph (필터 그래프 매니져 포인터 변수)
*	@param wszPath (저장 경로)
*	@return
*/
HRESULT SaveGraphFile(IGraphBuilder *pGraph, WCHAR *wszPath) {
	const WCHAR wszStreamName[] = L"ActiveMovieGraph";
	HRESULT hr;
	IStorage *pStorage = NULL;

	// 파일을 만듬
	hr = StgCreateDocfile(wszPath, STGM_CREATE | STGM_TRANSACTED | STGM_READWRITE | STGM_SHARE_EXCLUSIVE, 0, &pStorage);

	// 파일을 만드는데 실패했을 경우
	if (FAILED(hr)) {
		return hr;
	}

	IStream *pStream;

	// 파일에 쓰기 위한 스트림을 만듬
	hr = pStorage->CreateStream(wszStreamName, STGM_WRITE | STGM_CREATE | STGM_SHARE_EXCLUSIVE, 0, 0, &pStream);

	// 스트림을 만드는데 실패했을 경우
	if (FAILED(hr)) {
		// 스토리지 자원 반납
		pStorage->Release();

		return hr;
	}

	IPersistStream *pPersist = NULL;

	// 필터 매니져을 통해 펄시스트 스트림 인터페이스를 가져옴
	pGraph->QueryInterface(IID_IPersistStream, reinterpret_cast<void **>(&pPersist));

	// 펄시스트 스트림에 저장
	hr = pPersist->Save(pStream, TRUE);

	// 사용했던 자원들 반납
	pStream->Release();
	pPersist->Release();

	// 펄시스트 스트림에 저장을 완료했을 경우
	if (SUCCEEDED(hr)) {
		// 파일에 저장
		hr = pStorage->Commit(STGC_DEFAULT);
	}

	// 스토리지 자원 반납
	pStorage->Release();

	return hr;
}

int main() {
	// 필터 그래프 매니져 포인터 변수
	IGraphBuilder *pGraph = NULL;

	// 미디어 컨트롤 포인터 변수
	IMediaControl *pControl = NULL;

	// 미디어 이벤트 포인터 변수
	IMediaEvent *pEvent = NULL;

	// COM(Component Object Model) 라이브러리를 생성 (DirectShow는 COM 라이브러리 기반)
	HRESULT hr = CoInitialize(NULL);

	// COM 라이브러리가 생성되지 못한 경우
	if (FAILED(hr)) {
		// 에러 메세지 출력 및 프로그램 종료 
		printf("ERROR - Could not initialize COM library.\n");
		return hr;
	}

	// 필터 그래프 매니져 인스턴스 생성
	hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void **)&pGraph);

	// 필터 그래프 매니져가 생성되지 못한 경우
	if (FAILED(hr)) {
		// 에러 메세지 출력 및 프로그램 종료
		printf("ERROR - Could not create the Filter Graph Manager.\n");
		return hr;
	}

	// 필터 그래프 매니져를 통해 미디어 컨트롤 인스턴스를 가져옴
	// (미디어 컨트롤의 역할 : 미디어 스트림 제어 ex. 시작, 정지, 일시정지)
	hr = pGraph->QueryInterface(IID_IMediaControl, (void **)&pControl);

	// 미디어 컨트롤 객체 생성이 실패했을 경우
	if (FAILED(hr)) {
		// 에러 메세지 출력
		printf("ERROR - Could not create the Media Control object.\n");

		// 필터 그래프 매니져 자원 반납
		pGraph->Release();

		// COM 라이브러리를 닫음
		CoUninitialize();

		// 프로그램 종료
		return hr;
	}

	// 필터 그래프 매니져를 통해 미디어 이벤트 인스턴스를 가져옴
	// (미디어 이벤트의 역할 : 필터 그래프 매니져의 이벤트를 수신 ex. 재생 완료)
	hr = pGraph->QueryInterface(IID_IMediaEvent, (void **)&pEvent);

	// 미디어 이벤트 객체 생성이 실패했을 경우
	if (FAILED(hr)) {
		// 에러 메세지 출력, 사용했던 자원 반환 및 프로그램 종료
		printf("ERROR - Could not create the Media Event object.\n");

		// 사용했던 자원들을 반납
		pGraph->Release();
		pControl->Release();

		// COM 라이브러리를 닫음
		CoUninitialize();

		// 프로그램 종료
		return hr;
	}

	// 미디어 파일의 경로와 이름을 가져오지 못한 경우
	if (!GetMediaFileName()) {
		// 프로그램 종료
		return 0;
	}

	// 유니코드 일 경우
#ifndef UNICODE
	WCHAR wFileName[MAX_PATH];

	// 파일의 경로 및 파일명을 멀티바이트 캐릭터로 변경
	MultiByteToWideChar(CP_ACP, 0, g_pathFileName, -1, wFileName, MAX_PATH);

	// 필터 그래프 매니져를 통해 미디어 파일의 필터 그래프를 만듬
	hr = pGraph->RenderFile((LPCWSTR)wFileName,  NULL);
	// 유니코드가 아닌 경우
#else
	// 필터 그래프 매니져를 통해 미디어 파일의 필터 그래프를 만듬
	hr = pGraph->RenderFile((LPCWSTR)g_pathFileName, NULL);
#endif

	// 미디어 파일의 필터 그래프를 생성했을 경우
	if (SUCCEEDED(hr)) {
		// 미디어 컨트롤을 통해 스트림 재생
		hr = pControl->Run();

		// 스트림 재생이 된 경우
		if (SUCCEEDED(hr)) {
			long evCode;

			// 미디어 이벤트를 통해 재생 완료까지 대기
			pEvent->WaitForCompletion(INFINITE, &evCode);
		}

		// 미디어 컨트롤을 통해 스트림 정지
		hr = pControl->Stop();

		// 필터 그래프를 그래프에딧에서 볼 수 있도록 파일로 저장
		SaveGraphFile(pGraph, L"C:\\Users\\devetude\\Desktop\\SimpleMediaPlayer2\\MyGraph.GRF");
	}

	// 미디어 파일의 필터 그래프를 생성하지 못한 경우
	else {
		// 에러 메세지 출력
		printf("ERROR - Could not find the media fila.\n");
	}

	// 사용했던 자원들을 반납
	pControl->Release();
	pEvent->Release();
	pGraph->Release();

	// COM 라이브러리를 닫음
	CoUninitialize();
}